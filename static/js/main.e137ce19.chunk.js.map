{"version":3,"sources":["logo.svg","CroppingImage.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CroppingImage","state","src","crop","aspect","width","x","y","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","_this","setState","result","readAsDataURL","onImageLoaded","image","pixelCrop","imageRef","height","Object","objectSpread","makeClientCrop","onCropComplete","console","log","onCropChange","this","getCroppedImg","croppedImageUrl","fileName","_this2","canvas","document","createElement","getContext","drawImage","Promise","resolve","reject","toBlob","blob","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","_this$state","react_default","a","className","type","onChange","alt","ReactCrop_default","onComplete","PureComponent","Form","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","class","placeholder","React","Component","App","src_Form","style","backgroundColor","padding","src_CroppingImage","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2OCgHzBC,oNA3GbC,MAAQ,CACNC,IAAK,KACLC,KAAM,CACJC,OAAQ,EACRC,MAAO,GACPC,EAAG,EACHC,EAAG,MAIPC,aAAe,SAAAC,GACb,GAAIA,EAAEC,OAAOC,OAASF,EAAEC,OAAOC,MAAMC,OAAS,EAAG,CAC/C,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,OAAQ,kBAC9BC,EAAKC,SAAS,CAAEf,IAAKW,EAAOK,WAE9BL,EAAOM,cAAcV,EAAEC,OAAOC,MAAM,QAIxCS,cAAgB,SAACC,EAAOC,GACtBN,EAAKO,SAAWF,EADoB,IAI5BlB,EAASa,EAAKf,MAAdE,KAEJA,EAAKC,QAAUD,EAAKqB,QAAUrB,EAAKE,MACrCW,EAAKC,SAAS,CACZd,KAAKsB,OAAAC,EAAA,EAAAD,CAAA,GAAMtB,EAAP,CAAaqB,OAAQ,SAG3BR,EAAKW,eAAexB,EAAMmB,MAI9BM,eAAiB,SAACzB,EAAMmB,GACtBN,EAAKW,eAAexB,EAAMmB,GAC1BO,QAAQC,IAAI,eAAgBd,EAAKf,MAAMC,QAGzC6B,aAAe,SAAA5B,GACba,EAAKC,SAAS,CAAEd,gIAGGA,EAAMmB,8EACrBU,KAAKT,UAAYpB,EAAKE,OAASF,EAAKqB,wCACRQ,KAAKC,cACjCD,KAAKT,SACLD,EACA,uBAHIY,SAKNF,KAAKf,SAAS,CAAEiB,+JAINb,EAAOC,EAAWa,GAAU,IAAAC,EAAAJ,KAClCK,EAASC,SAASC,cAAc,UAiBtC,OAhBAF,EAAOhC,MAAQiB,EAAUjB,MACzBgC,EAAOb,OAASF,EAAUE,OACda,EAAOG,WAAW,MAE1BC,UACFpB,EACAC,EAAUhB,EACVgB,EAAUf,EACVe,EAAUjB,MACViB,EAAUE,OACV,EACA,EACAF,EAAUjB,MACViB,EAAUE,QAGL,IAAIkB,QAAQ,SAACC,EAASC,GAC3BP,EAAOQ,OAAO,SAAAC,GACZA,EAAKC,KAAOZ,EACZa,OAAOC,IAAIC,gBAAgBd,EAAKe,SAChCf,EAAKe,QAAUH,OAAOC,IAAIG,gBAAgBN,GAC1CH,EAAQP,EAAKe,UACZ,iDAIE,IAAAE,EACgCrB,KAAK/B,MAApCE,EADDkD,EACClD,KAAM+B,EADPmB,EACOnB,gBAAiBhC,EADxBmD,EACwBnD,IAE/B,OACEoD,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,OACbF,EAAAC,EAAAhB,cAAA,WACEe,EAAAC,EAAAhB,cAAA,SAAOkB,KAAK,OAAOC,SAAU1B,KAAKxB,gBAEnC0B,GAAmBoB,EAAAC,EAAAhB,cAAA,OAAKoB,IAAI,OAAOzD,IAAKgC,IACxChC,GACCoD,EAAAC,EAAAhB,cAACqB,EAAAL,EAAD,CACErD,IAAKA,EACLC,KAAMA,EACNiB,cAAeY,KAAKZ,cACpByC,WAAY7B,KAAKJ,eACjB8B,SAAU1B,KAAKD,uBAnGC+B,kBCoFbC,qBApFb,SAAAA,EAAYC,GAAO,IAAAhD,EAAA,OAAAS,OAAAwC,EAAA,EAAAxC,CAAAO,KAAA+B,IACjB/C,EAAAS,OAAAyC,EAAA,EAAAzC,CAAAO,KAAAP,OAAA0C,EAAA,EAAA1C,CAAAsC,GAAAK,KAAApC,KAAMgC,KACD/D,MAAQ,GAFIe,qHAYjB,OACEsC,EAAAC,EAAAhB,cAAA,WACEe,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,WACbF,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,UACbF,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,SACTf,EAAAC,EAAAhB,cAAA,SAAO8B,MAAM,SAAb,sBACAf,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,WACTf,EAAAC,EAAAhB,cAAA,SAAO8B,MAAM,QAAQZ,KAAK,OAAOa,YAAY,kBAInDhB,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,UACbF,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,SACTf,EAAAC,EAAAhB,cAAA,SAAO8B,MAAM,SAAb,qGACAf,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,WACTf,EAAAC,EAAAhB,cAAA,SAAO8B,MAAM,QAAQZ,KAAK,OAAOa,YAAY,mBAOrDhB,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,WACbF,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,UACbF,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,SACTf,EAAAC,EAAAhB,cAAA,SAAO8B,MAAM,SAAb,yFACAf,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,WACTf,EAAAC,EAAAhB,cAAA,SAAO8B,MAAM,QAAQZ,KAAK,OAAOa,YAAY,kBAInDhB,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,UACbF,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,SACTf,EAAAC,EAAAhB,cAAA,SAAO8B,MAAM,SAAb,mFACAf,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,WACTf,EAAAC,EAAAhB,cAAA,SAAO8B,MAAM,QAAQZ,KAAK,OAAOa,YAAY,mBAMrDhB,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,WACbF,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,UACbF,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,SACTf,EAAAC,EAAAhB,cAAA,SAAO8B,MAAM,SAAb,6EACAf,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,WACTf,EAAAC,EAAAhB,cAAA,SAAO8B,MAAM,QAAQZ,KAAK,OAAOa,YAAY,kBAInDhB,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,UACbF,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,SACTf,EAAAC,EAAAhB,cAAA,SAAO8B,MAAM,SAAb,2GACAf,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,WACTf,EAAAC,EAAAhB,cAAA,SAAO8B,MAAM,QAAQZ,KAAK,OAAOa,YAAY,mBAO7DhB,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,oBACTf,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,WACTf,EAAAC,EAAAhB,cAAA,UAAQ8B,MAAM,kBAAd,uJA7EeE,IAAMC,YCkCVC,mLA3BX,OACFnB,EAAAC,EAAAhB,cAAA,WAAS8B,MAAM,WACbf,EAAAC,EAAAhB,cAAA,OAAK8B,MAAM,sBACTf,EAAAC,EAAAhB,cAAA,MAAI8B,MAAM,SAAV,kMAGAf,EAAAC,EAAAhB,cAAA,KAAG8B,MAAM,YAAT,yBACwBf,EAAAC,EAAAhB,cAAA,uBADxB,KAGAe,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,WACbF,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,UACbF,EAAAC,EAAAhB,cAACmC,EAAD,OAGFpB,EAAAC,EAAAhB,cAAA,OAAKiB,UAAU,UACbF,EAAAC,EAAAhB,cAAA,OAAKoC,MAAO,CAAEC,gBAAiB,YAAaC,QAAS,SAArD,oIAGAvB,EAAAC,EAAAhB,cAACuC,EAAD,iBApBQN,aCKEO,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAhB,cAAC8C,EAAD,MAAS/C,SAASgD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e137ce19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass CroppingImage extends PureComponent {\n  state = {\n    src: null,\n    crop: {\n      aspect: 4,\n      width: 50,\n      x: 0,\n      y: 0,\n    },\n  };\n\n  onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () =>\n        this.setState({ src: reader.result }),\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  onImageLoaded = (image, pixelCrop) => {\n    this.imageRef = image;\n\n    // Make the library regenerate aspect crops if loading new images.\n    const { crop } = this.state;\n\n    if (crop.aspect && crop.height && crop.width) {\n      this.setState({\n        crop: { ...crop, height: null },\n      });\n    } else {\n      this.makeClientCrop(crop, pixelCrop);\n    }\n  };\n\n  onCropComplete = (crop, pixelCrop) => {\n    this.makeClientCrop(crop, pixelCrop);\n    console.log('onCropChange', this.state.src);\n  };\n\n  onCropChange = crop => {\n    this.setState({ crop });\n  };\n\n  async makeClientCrop(crop, pixelCrop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        pixelCrop,\n        'newFile.jpeg',\n      );\n      this.setState({ croppedImageUrl });\n    }\n  }\n\n  getCroppedImg(image, pixelCrop, fileName) {\n    const canvas = document.createElement('canvas');\n    canvas.width = pixelCrop.width;\n    canvas.height = pixelCrop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      image,\n      pixelCrop.x,\n      pixelCrop.y,\n      pixelCrop.width,\n      pixelCrop.height,\n      0,\n      0,\n      pixelCrop.width,\n      pixelCrop.height,\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n  render() {\n    const { crop, croppedImageUrl, src } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div>\n          <input type=\"file\" onChange={this.onSelectFile} />\n        </div>\n        {croppedImageUrl && <img alt=\"Crop\" src={croppedImageUrl} />}\n        {src && (\n          <ReactCrop\n            src={src}\n            crop={crop}\n            onImageLoaded={this.onImageLoaded}\n            onComplete={this.onCropComplete}\n            onChange={this.onCropChange}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\n\nexport default CroppingImage;\n","import React from 'react';\n\nclass Form extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n    };\n  }\n\n  componentDidMount() {\n    \n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"columns\">\n          <div className=\"column\">\n            <div class=\"field\">\n              <label class=\"label\">ФИО</label>\n              <div class=\"control\">\n                <input class=\"input\" type=\"text\" placeholder=\"Text input\" />\n              </div>\n            </div>\n          </div>\t\n          <div className=\"column\">\n            <div class=\"field\">\n              <label class=\"label\">Название компании</label>\n              <div class=\"control\">\n                <input class=\"input\" type=\"text\" placeholder=\"Text input\" />\n              </div>\n            </div>\n          </div>\t\n        </div>\n\n\n        <div className=\"columns\">\n          <div className=\"column\">\n            <div class=\"field\">\n              <label class=\"label\">Сумма претензии</label>\n              <div class=\"control\">\n                <input class=\"input\" type=\"text\" placeholder=\"Text input\" />\n              </div>\n            </div>\n          </div>\t\n          <div className=\"column\">\n            <div class=\"field\">\n              <label class=\"label\">Процент заявки</label>\n              <div class=\"control\">\n                <input class=\"input\" type=\"text\" placeholder=\"Text input\" />\n              </div>\n            </div>\n          </div>\t\n        </div>\n\n        <div className=\"columns\">\n          <div className=\"column\">\n            <div class=\"field\">\n              <label class=\"label\">Дата поставки</label>\n              <div class=\"control\">\n                <input class=\"input\" type=\"text\" placeholder=\"Text input\" />\n              </div>\n            </div>\n          </div>\t\n          <div className=\"column\">\n            <div class=\"field\">\n              <label class=\"label\">Юрлицо контрагента</label>\n              <div class=\"control\">\n                <input class=\"input\" type=\"text\" placeholder=\"Text input\" />\n              </div>\n            </div>\n          </div>\t\n        </div>\n\n\n<div class=\"field is-grouped\">\n  <div class=\"control\">\n    <button class=\"button is-link\">Сгенерировать PDF претензии</button>\n  </div>\n</div>\n        \t\n      </div>\n    ); \n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport 'bulma/css/bulma.css';\nimport logo from './logo.svg';\nimport CroppingImage from './CroppingImage';\nimport './App.css';\nimport Form from './Form';\n\nclass App extends Component {\n  render() {\n    return (\n  <section class=\"section\">\n    <div class=\"container is-fluid\">\n      <h1 class=\"title\">\n        Подготовьте претензию на пять минут \n      </h1>\n      <p class=\"subtitle\">\n        My first website with <strong>Bulma</strong>!\n      </p>\n      <div className=\"columns\">\n        <div className=\"column\">\n          <Form />\n          \t\n        </div>\n        <div className=\"column\">\n          <div style={{ backgroundColor: 'lightgray', padding: '15px' }}>\n            7,15 (семь) бел. рублей 15 копеек\n          </div>\n          <CroppingImage />\n        </div>\n      </div>\n    </div>\n  </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}